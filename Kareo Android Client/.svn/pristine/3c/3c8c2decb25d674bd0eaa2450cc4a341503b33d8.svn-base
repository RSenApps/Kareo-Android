package com.RSen.Kareo;

import java.util.Hashtable;

import org.joda.time.DateTimeConstants;
import org.joda.time.LocalDate;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeFormatterBuilder;
import org.taptwo.android.widget.TitleProvider;
import org.taptwo.android.widget.ViewFlow;

import android.app.Activity;
import android.app.AlertDialog;
import android.content.Context;
import android.content.SharedPreferences;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.ArrayAdapter;
import android.widget.BaseAdapter;
import android.widget.ListView;
import android.widget.ProgressBar;
import android.widget.Toast;

import com.google.gson.Gson;
import android.widget.TextView;

public class AsyncAdapter extends BaseAdapter implements TitleProvider{

	private LayoutInflater mInflater;
	
	
	private static final int daysDepth = 1000000000; // 2739726.02739726 years back and forward
	private static final int daysSize = daysDepth * 2 + 1;
	//public static Date[] dates = new Date[ daysSize ];
	//public static String[] content = new String[ daysSize ];
	
	public static Hashtable<LocalDate, String[][]> content = new Hashtable<LocalDate, String[][]>();
	private class ViewHolder {
		ProgressBar mProgressBar;
		ListView listView;
	}
	
	
	public AsyncAdapter(Context context) {
		
		mInflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
	}

	@Override
	public String[][] getItem(int position) {
		
		return content.get(getPositionDate(position));
	}

	@Override
	public long getItemId(int position) {
		return ViewFlow.INVALID_POSITION;
	}

	@Override
	public View getView(int position, View convertView, ViewGroup parent) {
		return drawView(position, convertView);
	}

	public View drawView(int position, View view) {
		ViewHolder holder = null;
		
		if(view == null) {
			view = mInflater.inflate(R.layout.day_view, null);
			
			holder = new ViewHolder();

			holder.mProgressBar = (ProgressBar) view.findViewById(R.id.progress);
			holder.listView = (ListView) view.findViewById(R.id.list);
			
			view.setTag(holder);
		} else {
			holder = (ViewHolder) view.getTag();
		}		


		
		if (getItem(position) != null) {
				String[][] appointmentStringArray = content.get(getPositionDate(position));
				Appointment[] appointments = new Appointment[appointmentStringArray.length];
				int aCount = 0;
				
				for (String[] a : appointmentStringArray)
				{
					
					Appointment newAppointment = new Appointment(a[0], a[1], a[2], a[3], a[4], a[5], "", "");
					appointments[aCount] = newAppointment;
					aCount++;
				}
				
				final ListViewAdapter listViewAdapter = new ListViewAdapter(view.getContext(), appointments);

				holder.listView.setAdapter(listViewAdapter);
			holder.listView.setOnItemClickListener(new OnItemClickListener() {

				@Override
				public void onItemClick(AdapterView<?> adapter, View view,
						int position, long id) {
					SharedPreferences prefs = view.getContext().getSharedPreferences("prefs", Activity.MODE_PRIVATE);
					Appointment appointment = (Appointment) listViewAdapter.getItem(position);
					AlertDialog.Builder builder= new AlertDialog.Builder(view.getContext());
					LayoutInflater inflater = (LayoutInflater) view.getContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
					View dialogView = inflater.inflate(R.layout.patientdetaildialog, null);  
					((TextView)dialogView.findViewById(R.id.name)).setText(appointment.patientName);
					String when = appointment.startTime + " - " + appointment.endTime;
					((TextView)dialogView.findViewById(R.id.when)).setText(when);
					((TextView)dialogView.findViewById(R.id.where)).setText(appointment.location);
					((TextView)dialogView.findViewById(R.id.status)).setText(appointment.status);
					builder.setView(dialogView);
					AlertDialog dialog = builder.show();
					if (appointment.patientID != "")
					{
						new CallWebService().execute(prefs.getString("email", ""), prefs.getString("password", ""), view.getContext(), "appointmentDetailed", appointment, AsyncAdapter.this, dialogView);
					}
					else
					{
						dialogView.findViewById(R.id.progress).setVisibility(View.GONE);

						((TextView)dialogView.findViewById(R.id.dob)).setVisibility(View.GONE);
						((TextView)dialogView.findViewById(R.id.notes)).setVisibility(View.GONE);
					}
				}
			});
			holder.mProgressBar.setVisibility(View.GONE);
			
			
			
			holder.listView.setDivider(view.getContext().getResources().getDrawable(R.color.orange));
			holder.listView.setDividerHeight(2);
			holder.listView.setVisibility(View.VISIBLE);
			
		}
		else {
			LocalDate todayDate = getPositionDate(position);
			DateTimeFormatter formatter = new DateTimeFormatterBuilder()
			.appendMonthOfYear(1)
			.appendLiteral('/')
			.appendDayOfMonth(1)
			.appendLiteral('/')
			.appendYear(4, 4)
			.toFormatter();
			holder.mProgressBar.setVisibility(View.VISIBLE);
			holder.listView.setVisibility(View.GONE);
			SharedPreferences prefs = view.getContext().getSharedPreferences("prefs", Activity.MODE_PRIVATE);
			String provider = prefs.getString("provider", "");
			
			new CallWebService().execute(prefs.getString("email", ""), prefs.getString("password", ""), view.getContext(), "appointments",provider,todayDate.toString(formatter), position, view, this);
			
		}
		return view;
	}
	

	@Override
	public int getCount() {
		return daysSize;
	}
	
	public int getTodayPosition() {
		return daysDepth;
	}
	
	public LocalDate getTodayDate() {
		return getPositionDate(daysDepth);
	}
	public void showDetailedAppointment(Appointment appointment, Context context, View dialogView)
	{
		
		
		dialogView.findViewById(R.id.progress).setVisibility(View.GONE);

		((TextView)dialogView.findViewById(R.id.dob)).setText(appointment.dob);
		((TextView)dialogView.findViewById(R.id.notes)).setText(appointment.notes);
		//dialog.setView(dialogView);
		
	}
	public int getPositionOfDate(LocalDate date)
	{
		 LocalDate startCal;
		    LocalDate endCal;
		    LocalDate currentTime = LocalDate.now();
		    if (date.getDayOfWeek() > DateTimeConstants.FRIDAY) {
		    	 date = date.plusWeeks(1).withDayOfWeek(DateTimeConstants.MONDAY);
		    }
		    if (currentTime.isAfter(date))
		    {
		    	startCal = date;
		    	endCal = currentTime;
		    	
		    }
		    else
		    {
		    	startCal = currentTime;
		    	endCal = date;
		    	
		    }
		    int workDays = 0;

		    //Return 0 if start and end are the same
		    if (startCal.isEqual(endCal)) {
		        return daysDepth;
		    }
		    


		    do {
		        startCal = startCal.plusDays(1);
		        if (startCal.getDayOfWeek() != DateTimeConstants.SATURDAY && startCal.getDayOfWeek() != DateTimeConstants.SUNDAY) {
		            ++workDays;
		        }
		    } while (startCal.isBefore(endCal));

		    if (currentTime.isAfter(date))
		    {
		    	return daysDepth - workDays;
		    }
		    else
		    {
		    	return daysDepth + workDays;
		    }
	}
	public LocalDate getPositionDate(int position) {
		   LocalDate start= LocalDate.now();
		   int weekdays = position - daysDepth;
		    int originalDayOfWeek = start.getDayOfWeek();
		    int numWeeks = weekdays / 5;
		    int remainderDays = weekdays % 5;
		    start = start.plusDays(numWeeks * 7 + remainderDays);

		    int adjustmentDays = 0;
		    if (weekdays > 0)
		    {
		    if (originalDayOfWeek == DateTimeConstants.SUNDAY) {
		        adjustmentDays = 1;
		    } else if (originalDayOfWeek + remainderDays > DateTimeConstants.FRIDAY) {
		        adjustmentDays = 2;
		    }
		    }
		    else //going backwards
		    {
		    	 if (originalDayOfWeek == DateTimeConstants.SATURDAY) {
				        adjustmentDays = -1;
				    } else if (originalDayOfWeek - remainderDays > DateTimeConstants.SUNDAY) {
				        adjustmentDays = -2;
				    }
		    }
		    start = start.plusDays(adjustmentDays);
		    return start;
	}
	/**
	 * Prepare dates for navigation, to past and to future
	 */
	

	@Override
	public String getTitle(int position) {
		// TODO Auto-generated method stub
		DateTimeFormatter formatter = new DateTimeFormatterBuilder()

		.appendDayOfWeekShortText().appendLiteral(' ').appendMonthOfYear(1)
				.appendLiteral('/').appendDayOfMonth(1).appendLiteral('/')
				.appendYear(2, 2).toFormatter();
		return getPositionDate(position).toString(formatter);
	}
	
	
	
	



}
