package com.RSen.Kareo;

import java.util.Hashtable;

import org.joda.time.DateTime;
import org.joda.time.DateTimeConstants;
import org.joda.time.Days;
import org.joda.time.LocalDate;
import org.joda.time.format.DateTimeFormat;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeFormatterBuilder;
import org.taptwo.android.widget.TitleProvider;
import org.taptwo.android.widget.ViewFlow;

import android.app.Activity;
import android.app.AlertDialog;
import android.content.Context;
import android.content.SharedPreferences;
import android.os.Handler;
import android.os.Handler.Callback;
import android.os.Message;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.ArrayAdapter;
import android.widget.BaseAdapter;
import android.widget.ListView;
import android.widget.ProgressBar;
import android.widget.Toast;

import com.google.gson.Gson;
import android.widget.TextView;

public class AsyncAdapter extends BaseAdapter implements TitleProvider{

	private LayoutInflater mInflater;
	
	
	public static final int daysDepth =  1000000000; // 2739726.02739726 years back and forward
	private static final int daysSize = daysDepth * 2 + 1;
	//public static Date[] dates = new Date[ daysSize ];
	//public static String[] content = new String[ daysSize ];
	
	
	private class ViewHolder {
		ProgressBar mProgressBar;
		ListView listView;
		TextView lastUpdated;
	}
	
	
	public AsyncAdapter(Context context) {
		
		mInflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
	}

	@Override
	public ListViewAdapter getItem(int position) {
		
		return CacheManager.getAppointments(mInflater.getContext(), getPositionDate(position));
	}

	@Override
	public long getItemId(int position) {
		return ViewFlow.INVALID_POSITION;
	}

	@Override
	public View getView(final int position, final View convertView, ViewGroup parent) {
	
		return drawView(position, convertView);
	}

	public View drawView(int position, View view) {
		ViewHolder holder = null;
		
		if(view == null) {
			view = mInflater.inflate(R.layout.day_view, null);
			
			holder = new ViewHolder();
			holder.lastUpdated= (TextView) view.findViewById(R.id.lastUpdated);
			holder.mProgressBar = (ProgressBar) view.findViewById(R.id.progress);
			holder.listView = (ListView) view.findViewById(R.id.list);
			
			view.setTag(holder);
		} else {
			holder = (ViewHolder) view.getTag();
		}		


		ListViewAdapter adapter = CacheManager.getAppointments(mInflater.getContext(), getPositionDate(position));
		if (adapter != null) {

				if (!CallWebServiceAppointments.loginFailed)
				{
					holder.lastUpdated.setText("Last Updated: " + DateTime.now().toString(DateTimeFormat.shortTime()));
				}
				

				holder.listView.setAdapter(adapter);
			
			holder.mProgressBar.setVisibility(View.GONE);
			holder.listView.setVisibility(View.VISIBLE);
			holder.listView.setDivider(view.getContext().getResources().getDrawable(R.color.orange));
			holder.listView.setDividerHeight(2);
			
			holder.listView.setOnItemClickListener(onItemClick);
			
		}
		else {
			holder.mProgressBar.setVisibility(View.VISIBLE);
			holder.listView.setVisibility(View.GONE);
			holder.lastUpdated.setText("Updating...");
			
			
		
			
		}
		return view;
	}
	
	
	@Override
	public int getCount() {
		return daysSize;
	}
	
	public int getTodayPosition() {
		return daysDepth;
	}
	
	public LocalDate getTodayDate() {
		return getPositionDate(daysDepth);
	}
	public void showDetailedAppointment(Appointment appointment, Context context, View dialogView)
	{
		
		
		dialogView.findViewById(R.id.progress).setVisibility(View.GONE);

		((TextView)dialogView.findViewById(R.id.dob)).setText(appointment.dob);
		((TextView)dialogView.findViewById(R.id.notes)).setText(appointment.notes);
		//dialog.setView(dialogView);
		
	}
	private OnItemClickListener onItemClick = new OnItemClickListener() {
		@Override
		public void onItemClick(AdapterView<?> adapter, View view,
				int position, long id) {
			SharedPreferences prefs = view.getContext().getSharedPreferences("prefs", Activity.MODE_PRIVATE);
			ListViewAdapter listViewAdapter = (ListViewAdapter) adapter.getAdapter();
			Appointment appointment = (Appointment) listViewAdapter.getItem(position);
			AlertDialog.Builder builder= new AlertDialog.Builder(view.getContext());
			LayoutInflater inflater = (LayoutInflater) view.getContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
			View dialogView = inflater.inflate(R.layout.patientdetaildialog, null);  
			((TextView)dialogView.findViewById(R.id.name)).setText(appointment.patientName);
			String when = appointment.startTime + " - " + appointment.endTime;
			((TextView)dialogView.findViewById(R.id.when)).setText(when);
			((TextView)dialogView.findViewById(R.id.where)).setText(appointment.location);
			((TextView)dialogView.findViewById(R.id.status)).setText(appointment.status);
			builder.setInverseBackgroundForced(true);
			builder.setView(dialogView);
			builder.show();
			if (!appointment.patientID.matches(""))
			{
				new CallWebServiceAppointmentDetailed().execute(prefs.getString("email", ""), prefs.getString("password", ""), view.getContext(),  appointment, AsyncAdapter.this, dialogView);
			}
			else
			{
				dialogView.findViewById(R.id.progress).setVisibility(View.GONE);

				((TextView)dialogView.findViewById(R.id.dob)).setVisibility(View.GONE);
				((TextView)dialogView.findViewById(R.id.notes)).setVisibility(View.GONE);
				((TextView)dialogView.findViewById(R.id.textView5)).setVisibility(View.GONE); //labels
				((TextView)dialogView.findViewById(R.id.textView6)).setVisibility(View.GONE);
			}
		}
	};
	public static int getPositionOfDate(LocalDate date)
	{
		 LocalDate start;
		    LocalDate end;
		    LocalDate currentTime = LocalDate.now();
		    if (date.getDayOfWeek() > DateTimeConstants.FRIDAY) {
		    	 date = date.plusWeeks(1).withDayOfWeek(DateTimeConstants.MONDAY);
		    }
		    if (currentTime.isAfter(date))
		    {
		    	start = date;
		    	end = currentTime;
		    	
		    }
		    else
		    {
		    	start = currentTime;
		    	end = date;
		    	
		    }
		    if (start.getDayOfWeek() == DateTimeConstants.SATURDAY)
		    {
		        start = start.plusDays(2);
		    }
		    else if (start.getDayOfWeek() == DateTimeConstants.SUNDAY)
		    {
		        start = start.plusDays(1);
		    }

		    if (end.getDayOfWeek() == DateTimeConstants.SATURDAY)
		    {
		        end = end.plusDays(-1);
		    }
		    else if (end.getDayOfWeek() == DateTimeConstants.SUNDAY)
		    {
		        end = end.plusDays(-2);
		    }

		    int diff =  Days.daysBetween(start, end).getDays();

		    int result = diff / 7 * 5 + diff % 7;

		    if (end.getDayOfWeek() < start.getDayOfWeek())
		    {
		        return result - 2+daysDepth;
		    }
		    else if (currentTime.isAfter(date)){
		        return daysDepth - result;
		    }
		    else
		    {
		    	return result + daysDepth;
		    }
	}
	public static LocalDate getPositionDate(int position) {
		//TODO: needs serious work
		int businessDays = position - daysDepth;
		LocalDate current = LocalDate.now();
		LocalDate result;

			result = current;
			int weeks = businessDays/5;
			int remainder = businessDays%5;
			result = result.plusDays(weeks * 7);
			if (remainder == 0)
			{
				if (businessDays<0)
				{
					if (result.getDayOfWeek() == DateTimeConstants.SUNDAY)
					{
						result = result.plusDays(-2);
					}
					else if (result.getDayOfWeek() == DateTimeConstants.SATURDAY)
					{
						result = result.plusDays(-1);
					}
				}
				else
				{
					if (result.getDayOfWeek() == DateTimeConstants.SUNDAY)
					{
						result = result.plusDays(1);
					}
					else if (result.getDayOfWeek() == DateTimeConstants.SATURDAY)
					{
						result = result.plusDays(2);
					}
				}
			}
			else
			{
				
				for (int i = 0; i<Math.abs(remainder); i++)
				{
					if (businessDays>0)
					{
						if (result.getDayOfWeek() == DateTimeConstants.SUNDAY)
						{
							result = result.plusDays(2);
							
						}
						else if (result.getDayOfWeek() >= DateTimeConstants.FRIDAY)
						{
							result = result.plusDays(3);
							
						}
						else
						{
							result = result.plusDays(1);
						}
					}
					else
					{
						if (result.getDayOfWeek() == DateTimeConstants.SUNDAY || result.getDayOfWeek() == DateTimeConstants.MONDAY)
						{
							result = result.plusDays(-3);
							
						}
						else if (result.getDayOfWeek() >= DateTimeConstants.SATURDAY)
						{
							result = result.plusDays(-2);
							
						}
						else
						{
							result = result.plusDays(-1);
						}
					}
	
						
					
				}
			}
		
		
        return result;

	}
	/**
	 * Prepare dates for navigation, to past and to future
	 */
	

	@Override
	public String getTitle(int position) {
		// TODO Auto-generated method stub
		DateTimeFormatter formatter = new DateTimeFormatterBuilder()

		.appendDayOfWeekShortText().appendLiteral(' ').appendMonthOfYear(1)
				.appendLiteral('/').appendDayOfMonth(1).appendLiteral('/')
				.appendYear(2, 2).toFormatter();
		return getPositionDate(position).toString(formatter);
	}
	
	
	
	



}
